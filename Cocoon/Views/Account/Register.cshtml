@using Cocoon.Resources
@model G4Fit.Models.ViewModels.RegisterVM
@{
    string FacebookAppId = System.Configuration.ConfigurationManager.AppSettings["Facebook_App_ID"];
    var culture = System.Globalization.CultureInfo.CurrentUICulture.TwoLetterISOLanguageName.ToLowerInvariant();
    var Countries = ViewBag.Countries as List<G4Fit.Models.Domains.City>;
}
<section class="m-5 pt-3">
    <div class="card text-center d-block">
        <div class="card-header font-weight-bold text-white" style="background:black;">
            @(culture == "ar" ? "التسجيل فى G4Fit" : "Register in G4Fit")
        </div>
        <div class="card-body m-auto">
            <section class="Connect">
                <div class="container">
                    <div class="tab-content" id="nav-tabContent">
                        <div class="tab-pane fade show active" id="nav-profile" role="tabpanel" aria-labelledby="nav-home-tab">
                            <div class="Login">
                                @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { enctype = "multipart/form-data", @class = "text-center m-auto" }))
                                {
                                    @Html.ValidationMessage("Error", "", new { @class = "text-danger", style = "margin-bottom:10px;display:block" })
                                    <div class="form-group">
                                        @Html.TextBoxFor(s => s.Name, new { @class = "form-control text-center", placeholder = Website.NamePlaceholder })<i class="fa fa-user-circle fa-fw"></i>
                                        @Html.ValidationMessageFor(s => s.Name, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.TextBoxFor(s => s.Email, new { @class = "form-control text-center", placeholder = Website.Email })
                                        @Html.ValidationMessageFor(s => s.Email, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.TextBoxFor(s => s.IDNumber, new { @class = "form-control text-center", placeholder = Website.IDNumberPlaceholder })<i class="fa fa-id-card fa-fw"></i>
                                        @*@Html.ValidationMessageFor(s => s.IDNumber, "", new { @class = "text-danger" })*@
                                    </div>
                                    <div class="form-group">
                                        <div class="row">
                                            <div class="col-12">
                                                @Html.TextBoxFor(s => s.PhoneNumber, new { @class = "form-control text-center", placeholder = Website.PhoneNumberPlaceholder, type = "number" })<i style="left:29px" class="fa fa-phone fa-fw"></i>
                                            </div>

                                        </div>
                                        @Html.ValidationMessageFor(s => s.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.TextBoxFor(s => s.Address, new { @class = "form-control text-center", placeholder = Website.AddressPlaceholder })
                                        @Html.ValidationMessageFor(s => s.Address, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.TextBoxFor(s => s.Password, new { @class = "form-control text-center", placeholder = Website.PasswordPlaceholder, type = "password" })<i class="fa fa-user-lock fa-fw"></i>
                                        @Html.ValidationMessageFor(s => s.Password, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="form-group">
                                        @Html.TextBoxFor(s => s.ConfirmPassword, new { @class = "form-control text-center", placeholder = Website.ConfirmPasswordPlaceholder, type = "password" })<i class="fa fa-user-lock fa-fw"></i>
                                        @Html.ValidationMessageFor(s => s.ConfirmPassword, "", new { @class = "text-danger" })
                                    </div>
                                    @*<div class="form-group">
                                            <label for="Image">@Website.PersonalImage (@Website.Optional)</label>
                                            @Html.TextBoxFor(s => s.Image, new { @class = "form-control text-center form-control-file", type = "file", accept = "image/*" })
                                            @Html.ValidationMessageFor(s => s.Image, "", new { @class = "text-danger" })
                                        </div>*@
                                    <div class="form-group">
                                        <div class="form-check text-center">
                                            <input type="checkbox" id="termsCheckbox" class="form-check-input" />
                                            <label class="form-check-label" for="termsCheckbox">
                                                <a class=" mr-3 ml-3" style="color: black; text-decoration: underline;"
                                                   onmouseover="this.style.color='blue'"
                                                   onmouseout="this.style.color='black'"
                                                   href="@Url.Action("Index", "Terms")" target="_blank">
                                                    @(culture == "ar" ? "الموافقة على الشروط والأحكام" : "Accept Terms and Conditions")
                                                </a>
                                            </label>
                                        </div>
                                        <span id="termsError" class="text-danger" style="display: none;">
                                            @(culture == "ar" ? "يجب الموافقة على الشروط والأحكام" : "You must agree to the terms and conditions")
                                        </span>
                                    </div>
                                    <div class="form-group">
                                        <button id="submitButton" class="btn text-white" style="background-color:black;" type="submit">@Website.Register</button>
                                    </div>
                                }
                            </div>
                            <a href="@Url.Action("Login", "Account")" class="text-black"><strong>@(culture == "ar" ? "لديك حساب؟ تسجيل الدخول" : "Already registered? Login now")</strong></a>
                            @*<div class="separator my-3">@Website.Or</div>
                                <div class="row m-auto text-center">
                                    <div class="col-lg-12 my-2">
                                        <div class="fb-login-button" data-scope="public_profile,email" data-size="large" data-button-type="continue_with" data-layout="default" data-auto-logout-link="false" data-use-continue-as="true" data-onlogin="checkLoginState()" data-width=""></div>
                                        @using (Html.BeginForm("FBLogin", "Account", FormMethod.Post, new { @id = "FB-Form" }))
                                        {
                                            <input hidden name="accessToken" id="accessToken" />
                                        }
                                    </div>
                                </div>*@
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</section>


@section Scripts {
    <script>
        function statusChangeCallback(response) {  // Called with the results from FB.getLoginStatus().
            if (response.status === 'connected') {   // Logged into your webpage and Facebook.
                Login(response);
            }
        }

        function checkLoginState() {               // Called when a person is finished with the Login Button.
            FB.getLoginStatus(function (response) {   // See the onlogin handler
                statusChangeCallback(response);
            });
        }

        window.fbAsyncInit = function () {
            FB.init({
                appId: '@FacebookAppId',
                cookie: true,
                xfbml: true,
                version: 'v8.0'
            });
        };

        function Login(response) {
            $("#accessToken").val(response.authResponse.accessToken);
        $("#FB-Form").submit();
        }
    </script>
    <script>
        document.getElementById("submitButton").addEventListener("click", function (e) {
            const termsCheckbox = document.getElementById("termsCheckbox");
            const termsError = document.getElementById("termsError");

            if (!termsCheckbox.checked) {
                e.preventDefault(); // منع إرسال الفورم
                termsError.style.display = "block";
            } else {
                termsError.style.display = "none";
            }
        });
    </script>
}